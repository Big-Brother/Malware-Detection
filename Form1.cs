using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

using System.IO; // File Loading
using System.Diagnostics; // Process Listing
using System.Security.Cryptography; // MD5
using System.Net; // Connecting to API
using System.Text.RegularExpressions; // Stripping Strings

namespace Malware_Scanner
{
    public partial class scannerForm : Form
    {
        private string apiKey = "32b5c878c388a403131b0c95ea75fc44002e77b66fc2bca3c4aebd04e46a32a6"; // VirusTotal API Key
        string results = "https://www.virustotal.com/api/get_file_report.json"; // VirusTotal File Report Page

        public scannerForm()
        {
            InitializeComponent(); // Initialize Form Elements
        }

        private string[] optimizerProProcesses = new string[1]; // Processes run by Optimizer Pro
        private string[] myPCBackupProcesses = new string[1]; // Processes run by MyPC Backup
        private string[] searchProtectProcesses = new string[2]; // Processes run by Search Protect
        private string[] pcHelper360Processes = new string[1]; // Processes run by PC Helper 360

        private void scannerForm_Load(object sender, EventArgs e) // On Form Load Add Processes to Arrays
        {
            optimizerProProcesses[0] = "OptimizerPro";

            myPCBackupProcesses[0] = "BackupStack";

            searchProtectProcesses[0] = "cltmngui";
            searchProtectProcesses[1] = "CltMngSvc";

            pcHelper360Processes[0] = "pch360";
        }

        Dictionary<string, bool> scannedItems = new Dictionary<string, bool>(); // Items that have already been scanned (added later to stop same files being re-scanned)
        private void scanButton_Click(object sender, EventArgs e) // On Scan button clicked
        {
            startScan(); // Do menial starting tasks
            Process[] processlist = Process.GetProcesses(); // Get all processes

            foreach (Process process in processlist) // Cycle through all processes
            {
                Console.WriteLine("Process: {0} ID: {1}", process.ProcessName, process.Id); // Debug - Print to Visual Studio Console
                
                if (optimizerProProcesses.Contains(process.ProcessName) && scanFile(process.Modules[0].FileName)) // If Optimizer Pro Process and VirusTotal says it is not safe
                    fileDetected("Optimizer Pro", process.Modules[0].FileName); // Report the file was detected
                if (myPCBackupProcesses.Contains(process.ProcessName) && scanFile(process.Modules[0].FileName)) // If MyPC Backup Process and VirusTotal says it is not safe
                    fileDetected("MyPC Backup", process.Modules[0].FileName); // Report the file was detected
                if (searchProtectProcesses.Contains(process.ProcessName) && scanFile(process.Modules[0].FileName)) // If Search Protect Process and VirusTotal says it is not safe
                    fileDetected("Search Protect", process.Modules[0].FileName); // Report the file was detected
                if (pcHelper360Processes.Contains(process.ProcessName) && scanFile(process.Modules[0].FileName)) // If PC Helper 360 Process and VirusTotal says it is not safe
                    fileDetected("PC Helper 360", process.Modules[0].FileName); // Report the file was detected
            }
            endScan(); // Do menial ending tasks
        }

        private void specificScanButton_Click(object sender, EventArgs e) // Scan a specific file against VirusTotal's Database
        {
            if (openFileDialog.ShowDialog() == DialogResult.OK && openFileDialog.CheckFileExists) // If dialog was not cancelled and file exists
            {
                startScan(); // Do menial starting tasks

                console("Sending file to VirusTotal..."); // Tell console the file is being send to VirusTotal
                if (scanFile(openFileDialog.FileName)) // Scan file the user specified
                {
                    fileDetected("Potentially dangerous file", openFileDialog.FileName); // Report the file was detected
                }
                else
                {
                    MessageBox.Show("The file you specified seems to be safe.", "No danger detected", MessageBoxButtons.OK, MessageBoxIcon.Information); // Tell the user all seems safe
                }

                endScan(); // Do menial ending tasks
            }
        }

        private void startScan()
        {
            scannedItems.Clear(); // Clear scannedItems list
            consoleOutput.Text = ""; // Clear console
            console("Starting Scan..."); // Tell console the scan is starting
        }

        private void endScan()
        {
            console("Scan Complete!"); // Tell console the scan has ended
            colourConsole(); // Make the console look pretty
            MessageBox.Show("The system has finished it's scan...", "Scan Complete", MessageBoxButtons.OK, MessageBoxIcon.Information); // Alert to say scan has finished
        }

        private void fileDetected(String file, String fileName) // Report file was detected with alert and console output
        {
            console(file+" Detected @ "+fileName); // Tell console the file was found
            MessageBox.Show(file+" Detected @ " + fileName, file+" Detected", MessageBoxButtons.OK, MessageBoxIcon.Warning); // Make an alert the file was found
        }

        private bool scanFile(String fileName) // true - File is virus
        {
            if (scannedItems.ContainsKey(fileName)) return false; // Already scanned this file so just skip it...

            var data = string.Format("resource={0}&key={1}", GetMD5HashFromFile(fileName), apiKey); // MD5 and API Key to send
            var c = new WebClient(); // WebClient used for connection to API
            string s = c.UploadString(results, "POST", data); // Connect to the API and POST the data
            var r = ParseJSON(s); // Parse the response
            
            int nonBlank = 0; // If a line is blank, it is safe, numerous non-blanks = multiple virus confirmations
            foreach (string str in r.Values) // Cycle through response lines
            {
                if (Regex.Replace(str, @"\s+", "") != "") nonBlank++; // Count positive results (non-blank lines)
                //MessageBox.Show(str);
            }

            scannedItems.Add(fileName, nonBlank >= 20); // Say this item was scanned and store the result
            return scannedItems[fileName]; // Return final scan result
        }

        private string GetMD5HashFromFile(string fileName) // Get MD5 of a file
        {
            using (var md5 = MD5.Create()) // Using MD5
            {
                using (var stream = File.OpenRead(fileName)) // Open File
                {
                    return BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", string.Empty).ToLower(); // Respond with MD5 of file, converted to lowercase
                }
            }
        }

        private Dictionary<string, string> ParseJSON(string json) // JSON Parser
        {
            var d = new Dictionary<string, string>(); // Line storage
            json = json.Replace("\"", null).Replace("[", null).Replace("]", null); // Replace wasted chars
            var r = json.Substring(1, json.Length - 2).Split(','); // Substring each value
            foreach (string s in r) // Cycle through results
            {
                d.Add(s.Split(':')[0], s.Split(':')[1]); // Add result to line storage
            }
            return d; // Return parsed JSON
        }

        private void console(String output) // Print to console with date/time and message
        {
            consoleOutput.Text += "[" + DateTime.Now.ToString("MM/dd/yy H:mm:ss") + "] " + output + Environment.NewLine;
        }

        private void colourConsole() // Colour the console
        {
            int lineCount = -1;
            foreach (var line in consoleOutput.Lines) // Cycle through all lines
            {
                // Make line red if not first or last (positive virus response)
                if (++lineCount == 0 || lineCount == consoleOutput.Lines.Length - 1) continue;
                consoleOutput.Select(consoleOutput.GetFirstCharIndexFromLine(lineCount), line.Length);
                consoleOutput.SelectionColor = Color.Red;
            }
        }
    }
}
